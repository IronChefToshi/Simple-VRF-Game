{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require = require('./response-types'),\n    FinalPeer = _require.FinalPeer;\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'findPeer', import('ipfs-core/src/components/dht')>}\n   */\n  function findPeer(_x) {\n    return _findPeer.apply(this, arguments);\n  }\n\n  function _findPeer() {\n    _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, options = {}) {\n      var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, data, _data$Responses$, ID, Addrs;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.post('dht/findpeer', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(peerId instanceof Uint8Array ? new CID(peerId) : peerId)\n                }, options)),\n                headers: options.headers\n              });\n\n            case 2:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 5;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 7:\n              _context.next = 9;\n              return _iterator.next();\n\n            case 9:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 13;\n              return _step.value;\n\n            case 13:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 22;\n                break;\n              }\n\n              data = _value;\n\n              if (!(data.Type === FinalPeer && data.Responses)) {\n                _context.next = 19;\n                break;\n              }\n\n              _data$Responses$ = data.Responses[0], ID = _data$Responses$.ID, Addrs = _data$Responses$.Addrs;\n              return _context.abrupt(\"return\", {\n                id: ID,\n                addrs: (Addrs || []).map(a => multiaddr(a))\n              });\n\n            case 19:\n              _iteratorNormalCompletion = true;\n              _context.next = 7;\n              break;\n\n            case 22:\n              _context.next = 28;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](5);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 28:\n              _context.prev = 28;\n              _context.prev = 29;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 33;\n                break;\n              }\n\n              _context.next = 33;\n              return _iterator.return();\n\n            case 33:\n              _context.prev = 33;\n\n              if (!_didIteratorError) {\n                _context.next = 36;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 36:\n              return _context.finish(33);\n\n            case 37:\n              return _context.finish(28);\n\n            case 38:\n              throw new Error('not found');\n\n            case 39:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 24, 28, 38], [29,, 33, 37]]);\n    }));\n    return _findPeer.apply(this, arguments);\n  }\n\n  return findPeer;\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/dht/find-peer.js"],"names":["CID","require","multiaddr","configure","toUrlSearchParams","FinalPeer","module","exports","api","findPeer","peerId","options","post","timeout","signal","searchParams","arg","Uint8Array","headers","res","ndjson","data","Type","Responses","ID","Addrs","id","addrs","map","a","Error"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;eACsBA,OAAO,CAAC,kBAAD,C;IAArBI,S,YAAAA,S;;AAERC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,QAJiB;AAAA;AAAA;;AAAA;AAAA,yEAIhC,iBAAyBC,MAAzB,EAAiCC,OAAO,GAAG,EAA3C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACoBH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADwB;AAEzCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFyB;AAGzCC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,YAAKN,MAAM,YAAYO,UAAlB,GAA+B,IAAIjB,GAAJ,CAAQU,MAAR,CAA/B,GAAiDA,MAAtD;AAD0B,mBAE1BC,OAF0B,EAHU;AAOzCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAPwB,eAAzB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA;AAAA;AAAA,yCAW2BA,GAAG,CAACC,MAAJ,EAX3B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAWmBC,cAAAA,IAXnB;;AAAA,oBAYQA,IAAI,CAACC,IAAL,KAAcjB,SAAd,IAA2BgB,IAAI,CAACE,SAZxC;AAAA;AAAA;AAAA;;AAAA,iCAa4BF,IAAI,CAACE,SAAL,CAAe,CAAf,CAb5B,EAacC,EAbd,oBAacA,EAbd,EAakBC,KAblB,oBAakBA,KAblB;AAAA,+CAca;AACLC,gBAAAA,EAAE,EAAEF,EADC;AAELG,gBAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkBC,CAAC,IAAI3B,SAAS,CAAC2B,CAAD,CAAhC;AAFF,eAdb;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,oBAqBQ,IAAIC,KAAJ,CAAU,WAAV,CArBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA4BhC,SAAOrB,QAAP;AACD,CA7ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { FinalPeer } = require('./response-types')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'findPeer', import('ipfs-core/src/components/dht')>}\n   */\n  async function findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId instanceof Uint8Array ? new CID(peerId) : peerId}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const { ID, Addrs } = data.Responses[0]\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return findPeer\n})\n"]},"metadata":{},"sourceType":"script"}