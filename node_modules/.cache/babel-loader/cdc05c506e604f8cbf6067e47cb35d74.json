{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _require = require('bignumber.js'),\n    BigNumber = _require.BigNumber;\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bitswap/stat')>}\n   */\n  function stat() {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options = {}) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.post('bitswap/stat', {\n                searchParams: toUrlSearchParams(options),\n                timeout: options.timeout,\n                signal: options.signal,\n                headers: options.headers\n              });\n\n            case 2:\n              res = _context.sent;\n              _context.t0 = toCoreInterface;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _context.t1 = _context.sent;\n              return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});\n\nfunction toCoreInterface(res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map(k => new CID(k['/'])),\n    peers: res.Peers || [],\n    blocksReceived: new BigNumber(res.BlocksReceived),\n    dataReceived: new BigNumber(res.DataReceived),\n    blocksSent: new BigNumber(res.BlocksSent),\n    dataSent: new BigNumber(res.DataSent),\n    dupBlksReceived: new BigNumber(res.DupBlksReceived),\n    dupDataReceived: new BigNumber(res.DupDataReceived)\n  };\n}","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/bitswap/stat.js"],"names":["require","BigNumber","CID","configure","toUrlSearchParams","module","exports","api","stat","options","post","searchParams","timeout","signal","headers","res","toCoreInterface","json","provideBufLen","ProvideBufLen","wantlist","Wantlist","map","k","peers","Peers","blocksReceived","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived"],"mappings":"AAAA;;;;;;eAEsBA,OAAO,CAAC,cAAD,C;IAArBC,S,YAAAA,S;;AACR,IAAMC,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,qEAIhC,iBAAqBC,OAAO,GAAG,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,YAAY,EAAEP,iBAAiB,CAACK,OAAD,CADU;AAEzCG,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OAFwB;AAGzCC,gBAAAA,MAAM,EAAEJ,OAAO,CAACI,MAHyB;AAIzCC,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AAJwB,eAAzB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA,4BAQSC,eART;AAAA;AAAA,qBAQ+BD,GAAG,CAACE,IAAJ,EAR/B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAchC,SAAOT,IAAP;AACD,CAfyB,CAA1B;;AAiBA,SAASQ,eAAT,CAA0BD,GAA1B,EAA+B;AAC7B,SAAO;AACLG,IAAAA,aAAa,EAAEH,GAAG,CAACI,aADd;AAELC,IAAAA,QAAQ,EAAE,CAACL,GAAG,CAACM,QAAJ,IAAgB,EAAjB,EAAqBC,GAArB,CAAyBC,CAAC,IAAI,IAAIrB,GAAJ,CAAQqB,CAAC,CAAC,GAAD,CAAT,CAA9B,CAFL;AAGLC,IAAAA,KAAK,EAAGT,GAAG,CAACU,KAAJ,IAAa,EAHhB;AAILC,IAAAA,cAAc,EAAE,IAAIzB,SAAJ,CAAcc,GAAG,CAACY,cAAlB,CAJX;AAKLC,IAAAA,YAAY,EAAE,IAAI3B,SAAJ,CAAcc,GAAG,CAACc,YAAlB,CALT;AAMLC,IAAAA,UAAU,EAAE,IAAI7B,SAAJ,CAAcc,GAAG,CAACgB,UAAlB,CANP;AAOLC,IAAAA,QAAQ,EAAE,IAAI/B,SAAJ,CAAcc,GAAG,CAACkB,QAAlB,CAPL;AAQLC,IAAAA,eAAe,EAAE,IAAIjC,SAAJ,CAAcc,GAAG,CAACoB,eAAlB,CARZ;AASLC,IAAAA,eAAe,EAAE,IAAInC,SAAJ,CAAcc,GAAG,CAACsB,eAAlB;AATZ,GAAP;AAWD","sourcesContent":["'use strict'\n\nconst { BigNumber } = require('bignumber.js')\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bitswap/stat')>}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map(k => new CID(k['/'])),\n    peers: (res.Peers || []),\n    blocksReceived: new BigNumber(res.BlocksReceived),\n    dataReceived: new BigNumber(res.DataReceived),\n    blocksSent: new BigNumber(res.BlocksSent),\n    dataSent: new BigNumber(res.DataSent),\n    dupBlksReceived: new BigNumber(res.DupBlksReceived),\n    dupDataReceived: new BigNumber(res.DupDataReceived)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}