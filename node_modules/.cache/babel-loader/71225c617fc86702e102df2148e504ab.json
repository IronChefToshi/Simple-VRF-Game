{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nvar modeToString = require('./mode-to-string');\n\nvar _require = require('ipfs-utils/src/globalthis'),\n    File = _require.File,\n    FormData = _require.FormData;\n\nfunction multipartRequest() {\n  return _multipartRequest.apply(this, arguments);\n}\n\nfunction _multipartRequest() {\n  _multipartRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source = '', abortController, headers = {}) {\n    var parts, formData, index, total, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, content, path, mode, mtime, fileSuffix, type, fieldName, qs, secs, nsecs, end;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parts = [];\n            formData = new FormData();\n            index = 0;\n            total = 0;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(normaliseInput(source));\n\n          case 8:\n            _context.next = 10;\n            return _iterator.next();\n\n          case 10:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 14;\n            return _step.value;\n\n          case 14:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 30;\n              break;\n            }\n\n            _value2 = _value, content = _value2.content, path = _value2.path, mode = _value2.mode, mtime = _value2.mtime;\n            fileSuffix = '';\n            type = content ? 'file' : 'dir';\n\n            if (index > 0) {\n              fileSuffix = \"-\".concat(index);\n            }\n\n            fieldName = type + fileSuffix;\n            qs = [];\n\n            if (mode !== null && mode !== undefined) {\n              qs.push(\"mode=\".concat(modeToString(mode)));\n            }\n\n            if (mtime != null) {\n              secs = mtime.secs, nsecs = mtime.nsecs;\n              qs.push(\"mtime=\".concat(secs));\n\n              if (nsecs != null) {\n                qs.push(\"mtime-nsecs=\".concat(nsecs));\n              }\n            }\n\n            if (qs.length) {\n              fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n            }\n\n            if (content) {\n              formData.set(fieldName, content, encodeURIComponent(path));\n              end = total + content.size;\n              parts.push({\n                name: path,\n                start: total,\n                end\n              });\n              total = end;\n            } else {\n              formData.set(fieldName, new File([''], encodeURIComponent(path), {\n                type: 'application/x-directory'\n              }));\n            }\n\n            index++;\n\n          case 27:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 30:\n            _context.next = 36;\n            break;\n\n          case 32:\n            _context.prev = 32;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 36:\n            _context.prev = 36;\n            _context.prev = 37;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 41;\n              break;\n            }\n\n            _context.next = 41;\n            return _iterator.return();\n\n          case 41:\n            _context.prev = 41;\n\n            if (!_didIteratorError) {\n              _context.next = 44;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 44:\n            return _context.finish(41);\n\n          case 45:\n            return _context.finish(36);\n\n          case 46:\n            return _context.abrupt(\"return\", {\n              total,\n              parts,\n              headers,\n              body: formData\n            });\n\n          case 47:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 32, 36, 46], [37,, 41, 45]]);\n  }));\n  return _multipartRequest.apply(this, arguments);\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js"],"names":["normaliseInput","require","modeToString","File","FormData","multipartRequest","source","abortController","headers","parts","formData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","body","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser')\nconst modeToString = require('./mode-to-string')\nconst { File, FormData } = require('ipfs-utils/src/globalthis')\n\nasync function multipartRequest (source = '', abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, encodeURIComponent(path))\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n\nmodule.exports = multipartRequest\n"]},"metadata":{},"sourceType":"script"}