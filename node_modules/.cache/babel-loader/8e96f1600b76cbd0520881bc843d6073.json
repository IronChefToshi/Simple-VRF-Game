{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/flush')>}\n   */\n  function flush(_x) {\n    return _flush.apply(this, arguments);\n  }\n\n  function _flush() {\n    _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options = {}) {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!path || typeof path !== 'string')) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('ipfs.files.flush requires a path');\n\n            case 2:\n              _context.next = 4;\n              return api.post('files/flush', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: path\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.json();\n\n            case 7:\n              data = _context.sent;\n              return _context.abrupt(\"return\", new CID(data.Cid));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _flush.apply(this, arguments);\n  }\n\n  return flush;\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/files/flush.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","flush","path","options","Error","post","timeout","signal","searchParams","arg","headers","res","json","data","Cid"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,sEAIhC,iBAAsBC,IAAtB,EAA4BC,OAAO,GAAG,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACM,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAD/B;AAAA;AAAA;AAAA;;AAAA,oBAEU,IAAIE,KAAJ,CAAU,kCAAV,CAFV;;AAAA;AAAA;AAAA,qBAKoBJ,GAAG,CAACK,IAAJ,CAAS,aAAT,EAAwB;AACxCC,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OADuB;AAExCC,gBAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFwB;AAGxCC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAEP;AADwB,mBAE1BC,OAF0B,EAHS;AAOxCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAPuB,eAAxB,CALpB;;AAAA;AAKQC,cAAAA,GALR;AAAA;AAAA,qBAcqBA,GAAG,CAACC,IAAJ,EAdrB;;AAAA;AAcQC,cAAAA,IAdR;AAAA,+CAgBS,IAAInB,GAAJ,CAAQmB,IAAI,CAACC,GAAb,CAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAuBhC,SAAOb,KAAP;AACD,CAxByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/flush')>}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return new CID(data.Cid)\n  }\n\n  return flush\n})\n"]},"metadata":{},"sourceType":"script"}