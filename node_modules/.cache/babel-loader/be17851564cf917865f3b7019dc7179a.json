{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar _require = require('any-signal'),\n    anySignal = _require.anySignal;\n\nvar AbortController = require('native-abort-controller');\n\nmodule.exports = configure(api => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(topic, data, options = {}) {\n      var searchParams, controller, signal, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              searchParams = toUrlSearchParams(_objectSpread({\n                arg: topic\n              }, options)); // allow aborting requests on body errors\n\n              controller = new AbortController();\n              signal = anySignal([controller.signal, options.signal]);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal,\n                searchParams\n              };\n              _context.next = 8;\n              return multipartRequest(data, controller, options.headers);\n\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'pubsub/pub', _context.t4);\n\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.text();\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/pubsub/publish.js"],"names":["configure","require","toUrlSearchParams","multipartRequest","anySignal","AbortController","module","exports","api","topic","data","options","searchParams","arg","controller","signal","timeout","headers","post","res","text"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAAD,CAAhC;;eACsBA,OAAO,CAAC,YAAD,C;IAArBG,S,YAAAA,S;;AACR,IAAMC,eAAe,GAAGJ,OAAO,CAAC,yBAAD,CAA/B;;AAEAK,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAACQ,GAAG,IAAI;AAChC;AAAA,wEAAO,iBAAOC,KAAP,EAAcC,IAAd,EAAoBC,OAAO,GAAG,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,YADD,GACgBV,iBAAiB;AACpCW,gBAAAA,GAAG,EAAEJ;AAD+B,iBAEjCE,OAFiC,EADjC,EAML;;AACMG,cAAAA,UAPD,GAOc,IAAIT,eAAJ,EAPd;AAQCU,cAAAA,MARD,GAQUX,SAAS,CAAC,CAACU,UAAU,CAACC,MAAZ,EAAoBJ,OAAO,CAACI,MAA5B,CAAD,CARnB;AAAA,4BAUaP,GAVb;AAAA;AAAA;AAWHQ,gBAAAA,OAAO,EAAEL,OAAO,CAACK,OAXd;AAYHD,gBAAAA,MAZG;AAaHH,gBAAAA;AAbG;AAAA;AAAA,qBAeKT,gBAAgB,CAACO,IAAD,EAAOI,UAAP,EAAmBH,OAAO,CAACM,OAA3B,CAfrB;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAUiBC,IAVjB,mBAUsB,YAVtB;;AAAA;AAUCC,cAAAA,GAVD;AAAA;AAAA,qBAmBCA,GAAG,CAACC,IAAJ,EAnBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAqBD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst { anySignal } = require('any-signal')\nconst AbortController = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  return async (topic, data, options = {}) => {\n    const searchParams = toUrlSearchParams({\n      arg: topic,\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('pubsub/pub', {\n      timeout: options.timeout,\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n})\n"]},"metadata":{},"sourceType":"script"}