{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar multiaddr = require('multiaddr');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options = {}) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.post('swarm/peers', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n\n            case 2:\n              _context.next = 4;\n              return _context.sent.json();\n\n            case 4:\n              res = _context.sent;\n              return _context.abrupt(\"return\", (res.Peers || []).map(peer => {\n                var info = {};\n\n                try {\n                  info.addr = multiaddr(peer.Addr);\n                  info.peer = peer.Peer;\n                } catch (error) {\n                  info.error = error;\n                  info.rawPeerInfo = peer;\n                }\n\n                if (peer.Muxer) {\n                  info.muxer = peer.Muxer;\n                }\n\n                if (peer.Latency) {\n                  info.latency = peer.Latency;\n                }\n\n                if (peer.Streams) {\n                  info.streams = peer.Streams;\n                }\n\n                if (peer.Direction != null) {\n                  info.direction = peer.Direction;\n                }\n\n                return info;\n              }));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function () {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/swarm/peers.js"],"names":["multiaddr","require","configure","toUrlSearchParams","module","exports","api","options","post","timeout","signal","searchParams","headers","json","res","Peers","map","peer","info","addr","Addr","Peer","error","rawPeerInfo","Muxer","muxer","Latency","latency","Streams","streams","Direction","direction"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AAAA,wEAAO,iBAAOC,OAAO,GAAG,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACoBD,GAAG,CAACE,IAAJ,CAAS,aAAT,EAAwB;AAC/CC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OAD8B;AAE/CC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAF+B;AAG/CC,gBAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAHgB;AAI/CK,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AAJ8B,eAAxB,CADpB;;AAAA;AAAA;AAAA,mCAMDC,IANC;;AAAA;AACCC,cAAAA,GADD;AAAA,+CAQE,CAACA,GAAG,CAACC,KAAJ,IAAa,EAAd,EAAkBC,GAAlB,CAAsBC,IAAI,IAAI;AACnC,oBAAMC,IAAI,GAAG,EAAb;;AACA,oBAAI;AACFA,kBAAAA,IAAI,CAACC,IAAL,GAAYnB,SAAS,CAACiB,IAAI,CAACG,IAAN,CAArB;AACAF,kBAAAA,IAAI,CAACD,IAAL,GAAYA,IAAI,CAACI,IAAjB;AACD,iBAHD,CAGE,OAAOC,KAAP,EAAc;AACdJ,kBAAAA,IAAI,CAACI,KAAL,GAAaA,KAAb;AACAJ,kBAAAA,IAAI,CAACK,WAAL,GAAmBN,IAAnB;AACD;;AACD,oBAAIA,IAAI,CAACO,KAAT,EAAgB;AACdN,kBAAAA,IAAI,CAACO,KAAL,GAAaR,IAAI,CAACO,KAAlB;AACD;;AACD,oBAAIP,IAAI,CAACS,OAAT,EAAkB;AAChBR,kBAAAA,IAAI,CAACS,OAAL,GAAeV,IAAI,CAACS,OAApB;AACD;;AACD,oBAAIT,IAAI,CAACW,OAAT,EAAkB;AAChBV,kBAAAA,IAAI,CAACW,OAAL,GAAeZ,IAAI,CAACW,OAApB;AACD;;AACD,oBAAIX,IAAI,CAACa,SAAL,IAAkB,IAAtB,EAA4B;AAC1BZ,kBAAAA,IAAI,CAACa,SAAL,GAAiBd,IAAI,CAACa,SAAtB;AACD;;AACD,uBAAOZ,IAAP;AACD,eAtBM,CARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAgCD,CAjCyB,CAA1B","sourcesContent":["'use strict'\n\nconst multiaddr = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (options = {}) => {\n    const res = await (await api.post('swarm/peers', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Peers || []).map(peer => {\n      const info = {}\n      try {\n        info.addr = multiaddr(peer.Addr)\n        info.peer = peer.Peer\n      } catch (error) {\n        info.error = error\n        info.rawPeerInfo = peer\n      }\n      if (peer.Muxer) {\n        info.muxer = peer.Muxer\n      }\n      if (peer.Latency) {\n        info.latency = peer.Latency\n      }\n      if (peer.Streams) {\n        info.streams = peer.Streams\n      }\n      if (peer.Direction != null) {\n        info.direction = peer.Direction\n      }\n      return info\n    })\n  }\n})\n"]},"metadata":{},"sourceType":"script"}