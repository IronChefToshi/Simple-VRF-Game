{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar _require = require('any-signal'),\n    anySignal = _require.anySignal;\n\nvar AbortController = require('native-abort-controller');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'put', import('ipfs-core/src/components/dht')>}\n   */\n  function put(_x, _x2) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value, options = {}) {\n      var controller, signal, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = anySignal([controller.signal, options.signal]);\n              _context.t0 = _awaitAsyncGenerator;\n              _context.t1 = api;\n              _context.t2 = _objectSpread;\n              _context.t3 = {\n                timeout: options.timeout,\n                signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: key\n                }, options))\n              };\n              _context.next = 8;\n              return _awaitAsyncGenerator(multipartRequest(value, controller, options.headers));\n\n            case 8:\n              _context.t4 = _context.sent;\n              _context.t5 = (0, _context.t2)(_context.t3, _context.t4);\n              _context.t6 = _context.t1.post.call(_context.t1, 'dht/put', _context.t5);\n              _context.next = 13;\n              return (0, _context.t0)(_context.t6);\n\n            case 13:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 16;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 18:\n              _context.next = 20;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 20:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 24;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 24:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 35;\n                break;\n              }\n\n              message = _value;\n              message = toCamel(message);\n              message.id = new CID(message.id);\n\n              if (message.responses) {\n                message.responses = message.responses.map(({\n                  ID,\n                  Addrs\n                }) => ({\n                  id: ID,\n                  addrs: (Addrs || []).map(a => multiaddr(a))\n                }));\n              }\n\n              _context.next = 32;\n              return message;\n\n            case 32:\n              _iteratorNormalCompletion = true;\n              _context.next = 18;\n              break;\n\n            case 35:\n              _context.next = 41;\n              break;\n\n            case 37:\n              _context.prev = 37;\n              _context.t7 = _context[\"catch\"](16);\n              _didIteratorError = true;\n              _iteratorError = _context.t7;\n\n            case 41:\n              _context.prev = 41;\n              _context.prev = 42;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 46;\n                break;\n              }\n\n              _context.next = 46;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 46:\n              _context.prev = 46;\n\n              if (!_didIteratorError) {\n                _context.next = 49;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 49:\n              return _context.finish(46);\n\n            case 50:\n              return _context.finish(41);\n\n            case 51:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16, 37, 41, 51], [42,, 46, 50]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/dht/put.js"],"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","multipartRequest","anySignal","AbortController","module","exports","api","put","key","value","options","controller","signal","timeout","searchParams","arg","headers","post","res","ndjson","message","id","responses","map","ID","Addrs","addrs","a"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAMK,gBAAgB,GAAGL,OAAO,CAAC,0BAAD,CAAhC;;eACsBA,OAAO,CAAC,YAAD,C;IAArBM,S,YAAAA,S;;AACR,IAAMC,eAAe,GAAGP,OAAO,CAAC,yBAAD,CAA/B;;AACAQ,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAACO,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIfC,GAJe;AAAA;AAAA;;AAAA;AAAA,sEAIhC,iBAAsBC,GAAtB,EAA2BC,KAA3B,EAAkCC,OAAO,GAAG,EAA5C;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE;AACMC,cAAAA,UAFR,GAEqB,IAAIR,eAAJ,EAFrB;AAGQS,cAAAA,MAHR,GAGiBV,SAAS,CAAC,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAAD,CAH1B;AAAA;AAAA,4BAKoBN,GALpB;AAAA;AAAA;AAMIO,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OANrB;AAOID,gBAAAA,MAPJ;AAQIE,gBAAAA,YAAY,EAAEd,iBAAiB;AAC7Be,kBAAAA,GAAG,EAAEP;AADwB,mBAE1BE,OAF0B;AARnC;AAAA;AAAA,0CAaYT,gBAAgB,CAACQ,KAAD,EAAQE,UAAR,EAAoBD,OAAO,CAACM,OAA5B,CAb5B;;AAAA;AAAA;AAAA;AAAA,wCAKwBC,IALxB,mBAK6B,SAL7B;AAAA;AAAA;;AAAA;AAKQC,cAAAA,GALR;AAAA;AAAA;AAAA;AAAA,yCAiB4BA,GAAG,CAACC,MAAJ,EAjB5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAiBiBC,cAAAA,OAjBjB;AAkBIA,cAAAA,OAAO,GAAGtB,OAAO,CAACsB,OAAD,CAAjB;AACAA,cAAAA,OAAO,CAACC,EAAR,GAAa,IAAI1B,GAAJ,CAAQyB,OAAO,CAACC,EAAhB,CAAb;;AACA,kBAAID,OAAO,CAACE,SAAZ,EAAuB;AACrBF,gBAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBC,GAAlB,CAAsB,CAAC;AAAEC,kBAAAA,EAAF;AAAMC,kBAAAA;AAAN,iBAAD,MAAoB;AAC5DJ,kBAAAA,EAAE,EAAEG,EADwD;AAE5DE,kBAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBI,CAAC,IAAI9B,SAAS,CAAC8B,CAAD,CAAhC;AAFqD,iBAApB,CAAtB,CAApB;AAID;;AAzBL;AA0BI,qBAAMP,OAAN;;AA1BJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAkChC,SAAOb,GAAP;AACD,CAnCyB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst { anySignal } = require('any-signal')\nconst AbortController = require('native-abort-controller')\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'put', import('ipfs-core/src/components/dht')>}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, controller, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map(({ ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}