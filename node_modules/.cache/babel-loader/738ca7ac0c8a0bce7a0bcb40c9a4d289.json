{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar Block = require('ipld-block');\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/get')>}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, options = {}) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // @ts-ignore - CID|string seems to confuse typedef\n              cid = new CID(cid);\n              _context.next = 3;\n              return api.post('block/get', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: cid.toString()\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.t0 = Block;\n              _context.t1 = Uint8Array;\n              _context.next = 8;\n              return res.arrayBuffer();\n\n            case 8:\n              _context.t2 = _context.sent;\n              _context.t3 = new _context.t1(_context.t2);\n              _context.t4 = cid;\n              return _context.abrupt(\"return\", new _context.t0(_context.t3, _context.t4));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/block/get.js"],"names":["Block","require","CID","configure","toUrlSearchParams","module","exports","api","get","cid","options","post","timeout","signal","searchParams","arg","toString","headers","res","Uint8Array","arrayBuffer"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,GAJiB;AAAA;AAAA;;AAAA;AAAA,oEAIhC,iBAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AACAD,cAAAA,GAAG,GAAG,IAAIP,GAAJ,CAAQO,GAAR,CAAN;AAFF;AAAA,qBAIoBF,GAAG,CAACI,IAAJ,CAAS,WAAT,EAAsB;AACtCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADqB;AAEtCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFsB;AAGtCC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,EAAEN,GAAG,CAACO,QAAJ;AADwB,mBAE1BN,OAF0B,EAHO;AAOtCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAPqB,eAAtB,CAJpB;;AAAA;AAIQC,cAAAA,GAJR;AAAA,4BAcalB,KAdb;AAAA,4BAcuBmB,UAdvB;AAAA;AAAA,qBAcwCD,GAAG,CAACE,WAAJ,EAdxC;;AAAA;AAAA;AAAA;AAAA,4BAc4DX,GAd5D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOD,GAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst Block = require('ipld-block')\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/get')>}\n   */\n  async function get (cid, options = {}) {\n    // @ts-ignore - CID|string seems to confuse typedef\n    cid = new CID(cid)\n\n    const res = await api.post('block/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return new Block(new Uint8Array(await res.arrayBuffer()), cid)\n  }\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}