{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar Multiaddr = require('multiaddr');\n\nvar _require = require('ipfs-utils/src/env'),\n    isBrowser = _require.isBrowser,\n    isWebWorker = _require.isWebWorker;\n\nvar parseDuration = require('parse-duration').default;\n\nvar log = require('debug')('ipfs-http-client:lib:error-handler');\n\nvar HTTP = require('ipfs-utils/src/http');\n\nvar merge = require('merge-options');\n\nvar toUrlString = require('ipfs-core-utils/src/to-url-string');\n\nvar DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http';\nvar DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost';\nvar DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001';\n/**\n * @param {ClientOptions|URL|Multiaddr|string} [options]\n * @returns {ClientOptions}\n */\n\nvar normalizeOptions = (options = {}) => {\n  var url;\n  var opts = {};\n\n  if (typeof options === 'string' || Multiaddr.isMultiaddr(options)) {\n    url = new URL(toUrlString(options));\n  } else if (options instanceof URL) {\n    url = options;\n  } else if (typeof options.url === 'string' || Multiaddr.isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url));\n    opts = options;\n  } else if (options.url instanceof URL) {\n    url = options.url;\n    opts = options;\n  } else {\n    opts = options || {};\n    var protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '');\n    var host = (opts.host || DEFAULT_HOST).split(':')[0];\n    var port = opts.port || DEFAULT_PORT;\n    url = new URL(\"\".concat(protocol, \"://\").concat(host, \":\").concat(port));\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  return _objectSpread(_objectSpread({}, opts), {}, {\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url\n  });\n};\n\nvar errorHandler = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n    var msg, data, error;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(response.headers.get('Content-Type') || '').startsWith('application/json')) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 4;\n            return response.json();\n\n          case 4:\n            data = _context.sent;\n            log(data);\n            msg = data.Message || data.message;\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return response.text();\n\n          case 11:\n            msg = _context.sent;\n\n          case 12:\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            log('Failed to parse error response', _context.t0); // Failed to extract/parse error message from response\n\n            msg = _context.t0.message;\n\n          case 18:\n            error = new HTTP.HTTPError(response); // This is what go-ipfs returns where there's a timeout\n\n            if (msg && msg.includes('context deadline exceeded')) {\n              error = new HTTP.TimeoutError(response);\n            } // This also gets returned\n\n\n            if (msg && msg.includes('request timed out')) {\n              error = new HTTP.TimeoutError(response);\n            } // If we managed to extract a message from the response, use it\n\n\n            if (msg) {\n              error.message = msg;\n            }\n\n            throw error;\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 14]]);\n  }));\n\n  return function errorHandler(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nvar kebabCase = str => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n\nvar parseTimeout = value => {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\n/**\n * @typedef {Object} ClientOptions\n * @property {string} [host]\n * @property {number} [port]\n * @property {string} [protocol]\n * @property {Headers|Record<string, string>} [headers] - Request headers.\n * @property {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\n * @property {string} [apiPath] - Path to the API.\n * @property {URL|string|Multiaddr} [url] - Full API URL.\n * @property {object} [ipld]\n * @property {any[]} [ipld.formats] - An array of additional [IPLD formats](https://github.com/ipld/interface-ipld-format) to support\n * @property {(format: string) => Promise<any>} [ipld.loadFormat] - an async function that takes the name of an [IPLD format](https://github.com/ipld/interface-ipld-format) as a string and should return the implementation of that codec\n */\n\n\nclass Client extends HTTP {\n  /**\n   * @param {ClientOptions|URL|Multiaddr|string} [options]\n   */\n  constructor(options = {}) {\n    var opts = normalizeOptions(options);\n    super({\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\n      headers: opts.headers,\n      base: \"\".concat(opts.url),\n      handleError: errorHandler,\n      transformSearchParams: search => {\n        var out = new URLSearchParams(); // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n\n        var _iterator = _createForOfIteratorHelper(search),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n              out.append(kebabCase(key), value);\n            } // server timeouts are strings\n\n\n            if (key === 'timeout' && !isNaN(value)) {\n              out.append(kebabCase(key), value);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return out;\n      }\n    });\n    delete this.get;\n    delete this.put;\n    delete this.delete;\n    delete this.options;\n    var fetch = this.fetch;\n\n    this.fetch = (resource, options = {}) => {\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n  }\n\n}\n\nClient.errorHandler = errorHandler;\nmodule.exports = Client;","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/lib/core.js"],"names":["Multiaddr","require","isBrowser","isWebWorker","parseDuration","default","log","HTTP","merge","toUrlString","DEFAULT_PROTOCOL","location","protocol","DEFAULT_HOST","hostname","DEFAULT_PORT","port","normalizeOptions","options","url","opts","isMultiaddr","URL","replace","host","split","apiPath","pathname","undefined","Number","errorHandler","response","headers","get","startsWith","json","data","msg","Message","message","text","error","HTTPError","includes","TimeoutError","KEBAB_REGEX","kebabCase","str","match","toLowerCase","parseTimeout","value","Client","constructor","timeout","base","handleError","transformSearchParams","search","out","URLSearchParams","key","append","isNaN","put","delete","fetch","resource","call","method","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/* eslint-env browser */\nconst Multiaddr = require('multiaddr')\nconst { isBrowser, isWebWorker } = require('ipfs-utils/src/env')\nconst parseDuration = require('parse-duration').default\nconst log = require('debug')('ipfs-http-client:lib:error-handler')\nconst HTTP = require('ipfs-utils/src/http')\nconst merge = require('merge-options')\nconst toUrlString = require('ipfs-core-utils/src/to-url-string')\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @param {ClientOptions|URL|Multiaddr|string} [options]\n * @returns {ClientOptions}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  let opts = {}\n\n  if (typeof options === 'string' || Multiaddr.isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || Multiaddr.isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url\n  }\n}\n\nconst errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  let error = new HTTP.HTTPError(response)\n\n  // This is what go-ipfs returns where there's a timeout\n  if (msg && msg.includes('context deadline exceeded')) {\n    error = new HTTP.TimeoutError(response)\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError(response)\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\n/**\n * @typedef {Object} ClientOptions\n * @property {string} [host]\n * @property {number} [port]\n * @property {string} [protocol]\n * @property {Headers|Record<string, string>} [headers] - Request headers.\n * @property {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\n * @property {string} [apiPath] - Path to the API.\n * @property {URL|string|Multiaddr} [url] - Full API URL.\n * @property {object} [ipld]\n * @property {any[]} [ipld.formats] - An array of additional [IPLD formats](https://github.com/ipld/interface-ipld-format) to support\n * @property {(format: string) => Promise<any>} [ipld.loadFormat] - an async function that takes the name of an [IPLD format](https://github.com/ipld/interface-ipld-format) as a string and should return the implementation of that codec\n */\nclass Client extends HTTP {\n  /**\n   * @param {ClientOptions|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      }\n    })\n\n    delete this.get\n    delete this.put\n    delete this.delete\n    delete this.options\n\n    const fetch = this.fetch\n\n    this.fetch = (resource, options = {}) => {\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nClient.errorHandler = errorHandler\n\nmodule.exports = Client\n"]},"metadata":{},"sourceType":"script"}