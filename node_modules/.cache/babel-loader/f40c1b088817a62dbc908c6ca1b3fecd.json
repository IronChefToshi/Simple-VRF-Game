{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar configure = require('../lib/configure');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require = require('any-signal'),\n    anySignal = _require.anySignal;\n\nvar AbortController = require('native-abort-controller');\n\nvar multicodec = require('multicodec');\n\nvar loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure((api, opts) => {\n  var load = loadFormat(opts.ipld);\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\n   */\n\n  var put = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode, options = {}) {\n      var encodingOptions, cid, settings, format, serialized, controller, signal, res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(options.cid && (options.format || options.hashAlg))) {\n                _context.next = 4;\n                break;\n              }\n\n              throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n\n            case 4:\n              if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n                _context.next = 6;\n                break;\n              }\n\n              throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n\n            case 6:\n              if (options.cid) {\n                cid = new CID(options.cid);\n                encodingOptions = _objectSpread(_objectSpread({}, options), {}, {\n                  // @ts-expect-error - https://github.com/multiformats/js-cid/pull/138\n                  format: multicodec.getName(cid.code),\n                  hashAlg: multihash.decode(cid.multihash).name\n                });\n                delete options.cid;\n              } else {\n                encodingOptions = options;\n              }\n\n              settings = _objectSpread({\n                format: 'dag-cbor',\n                hashAlg: 'sha2-256',\n                inputEnc: 'raw'\n              }, encodingOptions);\n              _context.next = 10;\n              return load(settings.format);\n\n            case 10:\n              format = _context.sent;\n              serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n              controller = new AbortController();\n              signal = anySignal([controller.signal, settings.signal]);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: settings.timeout,\n                signal,\n                searchParams: toUrlSearchParams(settings)\n              };\n              _context.next = 19;\n              return multipartRequest(serialized, controller, settings.headers);\n\n            case 19:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 23;\n              return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n            case 23:\n              res = _context.sent;\n              _context.next = 26;\n              return res.json();\n\n            case 26:\n              data = _context.sent;\n              return _context.abrupt(\"return\", new CID(data.Cid['/']));\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function put(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return put;\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/dag/put.js"],"names":["CID","require","multihash","configure","multipartRequest","toUrlSearchParams","anySignal","AbortController","multicodec","loadFormat","module","exports","api","opts","load","ipld","put","dagNode","options","cid","format","hashAlg","Error","encodingOptions","getName","code","decode","name","settings","inputEnc","serialized","util","serialize","controller","signal","timeout","searchParams","headers","post","res","json","data","Cid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { anySignal } = require('any-signal')\nconst AbortController = require('native-abort-controller')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\nmodule.exports = configure((api, opts) => {\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\n   */\n  const put = async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options')\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options')\n    }\n\n    let encodingOptions\n    if (options.cid) {\n      const cid = new CID(options.cid)\n      encodingOptions = {\n        ...options,\n        // @ts-expect-error - https://github.com/multiformats/js-cid/pull/138\n        format: multicodec.getName(cid.code),\n        hashAlg: multihash.decode(cid.multihash).name\n      }\n      delete options.cid\n    } else {\n      encodingOptions = options\n    }\n\n    const settings = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...encodingOptions\n    }\n\n    const format = await load(settings.format)\n    const serialized = format.util.serialize(dagNode)\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, settings.signal])\n\n    const res = await api.post('dag/put', {\n      timeout: settings.timeout,\n      signal,\n      searchParams: toUrlSearchParams(settings),\n      ...(\n        await multipartRequest(serialized, controller, settings.headers)\n      )\n    })\n    const data = await res.json()\n\n    return new CID(data.Cid['/'])\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}