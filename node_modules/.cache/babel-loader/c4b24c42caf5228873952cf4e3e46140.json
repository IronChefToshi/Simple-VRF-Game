{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar Multiaddr = require('multiaddr');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bootstrap/clear')>}\n   */\n  function clear() {\n    return _clear.apply(this, arguments);\n  }\n\n  function _clear() {\n    _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options = {}) {\n      var res, _yield$res$json, Peers;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.post('bootstrap/rm', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  all: true\n                })),\n                headers: options.headers\n              });\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              _yield$res$json = _context.sent;\n              Peers = _yield$res$json.Peers;\n              return _context.abrupt(\"return\", {\n                Peers: Peers.map(ma => new Multiaddr(ma))\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _clear.apply(this, arguments);\n  }\n\n  return clear;\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/bootstrap/clear.js"],"names":["configure","require","toUrlSearchParams","Multiaddr","module","exports","api","clear","options","post","timeout","signal","searchParams","all","headers","res","json","Peers","map","ma"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,sEAIhC,iBAAsBC,OAAO,GAAG,EAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADwB;AAEzCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFyB;AAGzCC,gBAAAA,YAAY,EAAEV,iBAAiB,iCAC1BM,OAD0B;AAE7BK,kBAAAA,GAAG,EAAE;AAFwB,mBAHU;AAOzCC,gBAAAA,OAAO,EAAEN,OAAO,CAACM;AAPwB,eAAzB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAW0BA,GAAG,CAACC,IAAJ,EAX1B;;AAAA;AAAA;AAWUC,cAAAA,KAXV,mBAWUA,KAXV;AAAA,+CAaS;AAAEA,gBAAAA,KAAK,EAAEA,KAAK,CAACC,GAAN,CAAUC,EAAE,IAAI,IAAIhB,SAAJ,CAAcgB,EAAd,CAAhB;AAAT,eAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOZ,KAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst Multiaddr = require('multiaddr')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bootstrap/clear')>}\n   */\n  async function clear (options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map(ma => new Multiaddr(ma)) }\n  }\n\n  return clear\n})\n"]},"metadata":{},"sourceType":"script"}