{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncGeneratorDelegate\");\n\nvar CID = require('cids');\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure((api, options) => {\n  var refs = /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args, options = {}) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!Array.isArray(args)) {\n                args = [args];\n              }\n\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('refs', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: args.map(arg => \"\".concat(arg instanceof Uint8Array ? new CID(arg) : arg))\n                }, options)),\n                headers: options.headers,\n                transform: toCamel\n              }));\n\n            case 3:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 5);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function refs(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  refs.local = require('./local')(options);\n  return refs;\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/refs/index.js"],"names":["CID","require","toCamel","configure","toUrlSearchParams","module","exports","api","options","refs","args","Array","isArray","post","timeout","signal","searchParams","arg","map","Uint8Array","headers","transform","res","ndjson","local"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,CAACI,GAAD,EAAMC,OAAN,KAAkB;AAC3C,MAAMC,IAAI;AAAA,0EAAG,iBAAkBC,IAAlB,EAAwBF,OAAO,GAAG,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,kBAAI,CAACG,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACxBA,gBAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACD;;AAHU;AAAA,0CAKOH,GAAG,CAACM,IAAJ,CAAS,MAAT,EAAiB;AACjCC,gBAAAA,OAAO,EAAEN,OAAO,CAACM,OADgB;AAEjCC,gBAAAA,MAAM,EAAEP,OAAO,CAACO,MAFiB;AAGjCC,gBAAAA,YAAY,EAAEZ,iBAAiB;AAC7Ba,kBAAAA,GAAG,EAAEP,IAAI,CAACQ,GAAL,CAASD,GAAG,cAAOA,GAAG,YAAYE,UAAf,GAA4B,IAAInB,GAAJ,CAAQiB,GAAR,CAA5B,GAA2CA,GAAlD,CAAZ;AADwB,mBAE1BT,OAF0B,EAHE;AAOjCY,gBAAAA,OAAO,EAAEZ,OAAO,CAACY,OAPgB;AAQjCC,gBAAAA,SAAS,EAAEnB;AARsB,eAAjB,CALP;;AAAA;AAKLoB,cAAAA,GALK;AAgBX,mFAAQA,GAAG,CAACC,MAAJ,EAAR;;AAhBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJd,IAAI;AAAA;AAAA;AAAA,KAAV;;AAkBAA,EAAAA,IAAI,CAACe,KAAL,GAAavB,OAAO,CAAC,SAAD,CAAP,CAAmBO,OAAnB,CAAb;AAEA,SAAOC,IAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure((api, options) => {\n  const refs = async function * (args, options = {}) {\n    if (!Array.isArray(args)) {\n      args = [args]\n    }\n\n    const res = await api.post('refs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: args.map(arg => `${arg instanceof Uint8Array ? new CID(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    })\n\n    yield * res.ndjson()\n  }\n  refs.local = require('./local')(options)\n\n  return refs\n})\n"]},"metadata":{},"sourceType":"script"}