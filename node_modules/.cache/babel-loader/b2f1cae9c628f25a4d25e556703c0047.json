{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ClaimChain\\\\chainlink_betting_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/resolve')>}\n   */\n  var resolve = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipfsPath, options = {}) {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.post('dag/resolve', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(ipfsPath).concat(options.path ? \"/\".concat(options.path).replace(/\\/[/]+/g, '/') : '')\n                }, options)),\n                headers: options.headers\n              });\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              return _context.abrupt(\"return\", {\n                cid: new CID(data.Cid['/']),\n                remainderPath: data.RemPath\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function resolve(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return resolve;\n});","map":{"version":3,"sources":["C:/Users/ClaimChain/node_modules/ipfs-http-client/src/dag/resolve.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","resolve","ipfsPath","options","post","timeout","signal","searchParams","arg","path","replace","headers","res","json","data","cid","Cid","remainderPath","RemPath"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,MAAMC,OAAO;AAAA,wEAAG,iBAAOC,QAAP,EAAiBC,OAAO,GAAG,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIH,GAAG,CAACI,IAAJ,CAAS,aAAT,EAAwB;AACxCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADuB;AAExCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFwB;AAGxCC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,YAAKN,QAAL,SAAgBC,OAAO,CAACM,IAAR,GAAe,WAAIN,OAAO,CAACM,IAAZ,EAAmBC,OAAnB,CAA2B,SAA3B,EAAsC,GAAtC,CAAf,GAA4D,EAA5E;AAD0B,mBAE1BP,OAF0B,EAHS;AAOxCQ,gBAAAA,OAAO,EAAER,OAAO,CAACQ;AAPuB,eAAxB,CADJ;;AAAA;AACRC,cAAAA,GADQ;AAAA;AAAA,qBAWKA,GAAG,CAACC,IAAJ,EAXL;;AAAA;AAWRC,cAAAA,IAXQ;AAAA,+CAaP;AAAEC,gBAAAA,GAAG,EAAE,IAAIrB,GAAJ,CAAQoB,IAAI,CAACE,GAAL,CAAS,GAAT,CAAR,CAAP;AAA+BC,gBAAAA,aAAa,EAAEH,IAAI,CAACI;AAAnD,eAbO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPjB,OAAO;AAAA;AAAA;AAAA,KAAb;;AAgBA,SAAOA,OAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/resolve')>}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: new CID(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n"]},"metadata":{},"sourceType":"script"}